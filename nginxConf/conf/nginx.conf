#教程见 http://openresty.org/download/agentzh-nginx-tutorials-zhcn.html
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #3.设置变量 geo指令放在http{}中
    #    geo $dollar {
    #        default "$";
    #    }


    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;



        location / {
            root   html;
            index  index.html index.htm;
        }

        #对 URI 参数值中的 %XX 这样的编码序列进行解码
        #curl localhost/test?name=hello%20world
        #类似 $arg_XXX 的内建变量还有不少，比如用来取 cookie 值的 $cookie_XXX 变量群，用来取请求头的 $http_XXX 变量群，以及用来取响应头的 $sent_http_XXX 变量群
        location /test {
            set_unescape_uri $name $arg_name;#set_unescape_uri解码
            echo "name: $name";
        }

        #内建变量
#        location /test {
#            echo "request_uri: $request_uri"; #包括请求参数
#            echo "uri: $uri"; #去掉参数后的请求地址
#            echo "document_uri: $document_uri";
#            echo "host: $host";
#            echo "hostname: $hostname";
#            echo "is_args: $is_args";
#            echo "nginx_version: $nginx_version";
#            echo "pid: $pid";
#            echo "query_string: $query_string";
#            echo "realpath_root: $realpath_root";
#            echo "remote_addr: $remote_addr";
#            echo "remote_port: $remote_port";
#            echo "remote_user: $remote_user";
#            echo "request: $request";
#            echo "request_body: $request_body";
#            echo "request_length: $request_length";
#            echo "request_method: $request_method";
#            echo "request_time: $request_time";
#            echo "scheme: $scheme";
#            echo "http_name: $http_content_type";#类似arg_name的套路
#            echo "args: $args";
#            echo "name: $arg_name";#$arg_name，这个变量的值是当前请求名为 name 的 URI 参数的值，而且还是未解码的原始形式的值,格式$arg_xxx
#            echo "age: $arg_age";
#        }


        #6. rewrite 内部跳转
#        location /foo {
#            set $a hello;
#            rewrite ^ /bar; #跳转到/bar
#        }
#        location /bar {
#            echo "a = $a";
#        }
###########################################################
        #5.echo_exec 内部跳转
        #既然是内部跳转，当前正在处理的请求就还是原来那个，只是当前的 location 发生了变化，所以还是原来的那一套 Nginx 变量的容器副本
#        location /foo {
#            set $a hello;
#            echo_exec /bar; #跳转到/bar
#        }
#        location /bar {
#            echo "a = $a";
#        }

        ###################################################

        #4. Nginx 变量一旦创建，其变量名的可见范围就是整个 Nginx 配置，甚至可以跨越不同虚拟主机的 server 配置块
        #        location /foo {
        #            set $foo 23;
        #            echo "foo=$foo";
        #        }
        #
#        location /bar {
        #            echo "foo=$foo"; #变量名是全局的,故该行不会报错,但是变量值只是在该location范围(因为各个请求都有自己独立的 $foo 变量的副本),即使先运行/foo,再运行/bar还是为空值
        ##            echo "foo=$fo"; 变量名会在nginx启动的时候加载,如果没有该变量名则报错
        #        }

        ######################################

        #3.设置变量
        #        location /test {
        #            set $foo hello;
        #            set $ba hi;
        ##            set $dollar $; 不能直接赋值 为$,如果想要设置值为$则可用ngx_geo指令来设置
        #            echo "foo: $foo, ${ba}world: $request_method and this is a dollar sign: $dollar";
        #        }
        ###################################

        #2.只允许GET POST请求
        #        if ($request_method !~* GET|POST){
        #            return 403;
        #        }
        ##################################
        #1.content by lua
        #        location /test {
        #            content_by_lua_file nginxConf/01_test.lua;
        #
#        }

        ##################################### location  ###############################################

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
